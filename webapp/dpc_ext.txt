//Rob From Ukrain
class ZCL_ZNVID_XX_ODATA_DPC_EXT definition
  public
  inheriting from ZCL_ZNVID_XX_ODATA_DPC
  create public .

public section.

  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~EXECUTE_ACTION
    redefinition .
protected section.

  methods PRODUCTSET_CREATE_ENTITY
    redefinition .
  methods PRODUCTSET_DELETE_ENTITY
    redefinition .
  methods PRODUCTSET_GET_ENTITY
    redefinition .
  methods PRODUCTSET_GET_ENTITYSET
    redefinition .
  methods PRODUCTSET_UPDATE_ENTITY
    redefinition .
  methods SUPPLIERSET_GET_ENTITY
    redefinition .
  methods SUPPLIERSET_GET_ENTITYSET
    redefinition .
private section.
ENDCLASS.



CLASS ZCL_ZNVID_XX_ODATA_DPC_EXT IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ZNVID_XX_ODATA_DPC_EXT->PRODUCTSET_CREATE_ENTITY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING
* | [--->] IV_SOURCE_NAME                 TYPE        STRING
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY_C(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH
* | [--->] IO_DATA_PROVIDER               TYPE REF TO /IWBEP/IF_MGW_ENTRY_PROVIDER(optional)
* | [<---] ER_ENTITY                      TYPE        ZCL_ZNVID_XX_ODATA_MPC=>TS_PRODUCT
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method PRODUCTSET_CREATE_ENTITY.

*POST /sap/opu/odata/sap/ZNVID_XX_ODATA_SRV/ProductSet
*{
*    "PRODUCT_ID" : "NV-9999",
*    "TYPE_CODE" : "PR",
*    "CATEGORY" : "Notebooks",
*    "NAME" : "My Nvidia Product",
*    "DESCRIPTION" : "Bitcoin Graphics Card",
*    "SUPPLIER_ID" : "0100000051",
*    "SUPPLIER_NAME" : "TECUM",
*    "TAX_TARIF_CODE" : "1 ",
*    "MEASURE_UNIT" : "EA",
*    "PRICE" : "5050.00",
*    "CURRENCY_CODE" : "USD",
*    "DIM_UNIT" : "CM"
*}

    data: ls_entity TYPE ZCL_ZNVID_XX_ODATA_MPC=>TS_PRODUCT,
          ls_header type bapi_epm_product_header,
          lt_return TYPE table of bapiret2.

    "Step 1: What was sent for creation

    IO_DATA_PROVIDER->read_entry_data(
      IMPORTING
        es_data = ls_entity
    ).

    "Step 2: Map data to BAPI
    MOVE-CORRESPONDING ls_entity to ls_header.

    "Step 3: Pre-checks or pre-processing


    "Step 4: Call BAPI to create data / Fire Insert
    CALL FUNCTION 'BAPI_EPM_PRODUCT_CREATE'
      EXPORTING
        headerdata               = ls_header
     TABLES
        RETURN                   = lt_return
              .


    "Step 5: Handle Errors
    IF lt_return is NOT INITIAL.

      me->mo_context->get_message_container( )->add_messages_from_bapi(
        EXPORTING
          it_bapi_messages          = lt_return
      ).

      RAISE EXCEPTION type /iwbep/cx_mgw_busi_exception
        EXPORTING
           message_container      = me->mo_context->get_message_container( )
      .

    ENDIF.


    "Step 6: Response back
    MOVE-CORRESPONDING ls_Entity to ER_ENTITY.


  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ZNVID_XX_ODATA_DPC_EXT->PRODUCTSET_DELETE_ENTITY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING
* | [--->] IV_SOURCE_NAME                 TYPE        STRING
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY_D(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method PRODUCTSET_DELETE_ENTITY.

    data lv_prod_id TYPE bapi_epm_product_id.

    "Step 1: get the product id
    READ TABLE it_key_tab INTO data(ls_key) INDEX 1.


    lv_prod_id = ls_key-value.
    "Step 2: call BAPI to delete the product
    CALL FUNCTION 'BAPI_EPM_PRODUCT_DELETE'
      EXPORTING
        product_id          = lv_prod_id
*       PERSIST_TO_DB       = ABAP_TRUE
*     TABLES
*       RETURN              =
              .





  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ZNVID_XX_ODATA_DPC_EXT->PRODUCTSET_GET_ENTITY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING
* | [--->] IV_SOURCE_NAME                 TYPE        STRING
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR
* | [--->] IO_REQUEST_OBJECT              TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY(optional)
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH
* | [<---] ER_ENTITY                      TYPE        ZCL_ZNVID_XX_ODATA_MPC=>TS_PRODUCT
* | [<---] ES_RESPONSE_CONTEXT            TYPE        /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_ENTITY_CNTXT
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD productset_get_entity.

    DATA: lv_prod_id TYPE BAPI_EPM_PRODUCT_id,
          ls_header  TYPE bapi_epm_product_header,
          lt_return  type table of bapiret2.

    "Step 1: Know the key which was passed by browser
    READ TABLE it_key_tab INTO DATA(ls_key) INDEX 1.
    lv_prod_id = ls_key-value.

    IF lv_prod_id IS INITIAL.
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception
        EXPORTING
           message_unlimited      = 'Hey Dude! please pass some proper product id'
      .
    ENDIF.

    "Step 2: Call the BAPI and read single data
    CALL FUNCTION 'BAPI_EPM_PRODUCT_GET_DETAIL'
      EXPORTING
        product_id = lv_prod_id
      IMPORTING
        headerdata = ls_header
     TABLES
*       CONVERSION_FACTORS       =
       RETURN     = lt_return
      .

    IF lt_return is NOT INITIAL .

      me->mo_context->get_message_container( )->add_messages_from_bapi(
        EXPORTING
          it_bapi_messages          = lt_return
      ).

      RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception
        EXPORTING
          message_container      = me->mo_context->get_message_container( )
      .

    ENDIF.

    "Step 3: Send the Response back
    MOVE-CORRESPONDING ls_header TO er_entity.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ZNVID_XX_ODATA_DPC_EXT->PRODUCTSET_GET_ENTITYSET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING
* | [--->] IV_SOURCE_NAME                 TYPE        STRING
* | [--->] IT_FILTER_SELECT_OPTIONS       TYPE        /IWBEP/T_MGW_SELECT_OPTION
* | [--->] IS_PAGING                      TYPE        /IWBEP/S_MGW_PAGING
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH
* | [--->] IT_ORDER                       TYPE        /IWBEP/T_MGW_SORTING_ORDER
* | [--->] IV_FILTER_STRING               TYPE        STRING
* | [--->] IV_SEARCH_STRING               TYPE        STRING
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITYSET(optional)
* | [<---] ET_ENTITYSET                   TYPE        ZCL_ZNVID_XX_ODATA_MPC=>TT_PRODUCT
* | [<---] ES_RESPONSE_CONTEXT            TYPE        /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method PRODUCTSET_GET_ENTITYSET.

    data: lt_header_data type TABLE of bapi_epm_product_header,
          lv_top  type i,
          lv_skip  type i,
          lv_total  type i,
          ls_max_rows type bapi_epm_max_rows,
          ls_Entity type zcl_znvid_xx_odata_mpc=>ts_product,
          lt_cat_sel type TABLE OF BAPI_EPM_PRODUCT_CATEG_RANGE,
          ls_cat_sel TYPE BAPI_EPM_PRODUCT_CATEG_RANGE.

    lv_top = is_paging-top.
    lv_skip = is_paging-skip.
    lv_total = lv_top + lv_skip.

    ls_max_rows-bapimaxrow = lv_total.

    READ TABLE it_filter_select_options INTO data(ls_filter_sel) WITH KEY property = 'CATEGORY'.
    IF sy-subrc = 0.
      LOOP AT ls_filter_sel-select_options INTO data(ls_select).
        MOVE-CORRESPONDING ls_select to ls_cat_sel.
        append ls_cat_sel to lt_cat_Sel.
      ENDLOOP.
    ENDIF.

    "Step 1: Call BAPI to load all data from product table
    call FUNCTION 'BAPI_EPM_PRODUCT_GET_LIST'
      EXPORTING
        max_rows              = ls_max_rows                 " Maximum number of lines of hits
      TABLES
         headerdata            = lt_header_data                 " EPM: Product header data of BOR object SEPM002
*        selparamproductid     =                  " EPM: BAPI range table for product ids
*        selparamsuppliernames =                  " EPM: BAPI range table for company names
        selparamcategories    =  lt_cat_Sel                " EPM: Range table for product categories
*        return                =                  " Return Parameter
      .
    "Step 2: Send the data from BAPI output to Response
    IF lv_total > 0.
      LOOP AT lt_header_data INTO data(ls_header) FROM lv_skip + 1 to lv_total.
        MOVE-CORRESPONDING ls_header to ls_Entity.
        append ls_entity to et_entityset.
      ENDLOOP.
    else.
      MOVE-CORRESPONDING lt_header_data to ET_ENTITYSET.
    ENDIF.


  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ZNVID_XX_ODATA_DPC_EXT->PRODUCTSET_UPDATE_ENTITY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING
* | [--->] IV_SOURCE_NAME                 TYPE        STRING
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY_U(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH
* | [--->] IO_DATA_PROVIDER               TYPE REF TO /IWBEP/IF_MGW_ENTRY_PROVIDER(optional)
* | [<---] ER_ENTITY                      TYPE        ZCL_ZNVID_XX_ODATA_MPC=>TS_PRODUCT
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method PRODUCTSET_UPDATE_ENTITY.

*PUT /sap/opu/odata/sap/ZNVID_XX_ODATA_SRV/ProductSet('NV-9999')
*{
*    "PRODUCT_ID" : "NV-9999",
*    "DESCRIPTION" : "Solana DeFi Graphics Card from NVidia",
*    "PRICE" : "5050.00",
*    "CURRENCY_CODE" : "USD"
*}


  data: ls_entity   type zcl_znvid_xx_odata_mpc=>ts_product,
        ls_header   TYPE bapi_epm_product_header,
        lv_prod_id  TYPE bapi_epm_product_id,
        ls_header_x TYPE bapi_epm_product_headerx.


  "Step 1: Read data for updation
  IO_DATA_PROVIDER->read_entry_data(
    IMPORTING
      es_data = ls_entity
  ).

  "Step 2: Pre-checks
  "Step 3: Map the data for update and inform DB to update fields
  MOVE-CORRESPONDING ls_Entity to ls_header.
  lv_prod_id = ls_entity-product_id.

  ls_header_x-price = abap_true.
  ls_header_x-currency_code = abap_true.
  ls_header_x-description = abap_true.
  ls_header_x-product_id = lv_prod_id.

  "Step 4: Call the BAPI
  CALL FUNCTION 'BAPI_EPM_PRODUCT_CHANGE'
    EXPORTING
      product_id                = lv_prod_id
     HEADERDATA                = ls_header
     HEADERDATAX               = ls_header_x
*     PERSIST_TO_DB             = ABAP_TRUE
*   TABLES
*     CONVERSION_FACTORS        =
*     CONVERSION_FACTORSX       =
*     RETURN                    =
            .


  "Step 5: Exception handling
  "Step 6: Reponse
  MOVE-CORRESPONDING ls_Entity TO ER_ENTITY.


  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ZNVID_XX_ODATA_DPC_EXT->SUPPLIERSET_GET_ENTITY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING
* | [--->] IV_SOURCE_NAME                 TYPE        STRING
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR
* | [--->] IO_REQUEST_OBJECT              TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY(optional)
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITY(optional)
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH
* | [<---] ER_ENTITY                      TYPE        ZCL_ZNVID_XX_ODATA_MPC=>TS_SUPPLIER
* | [<---] ES_RESPONSE_CONTEXT            TYPE        /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_ENTITY_CNTXT
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD supplierset_get_entity.

    DATA: lv_BP_id   TYPE bapi_epm_bp_id,
          ls_header  TYPE bapi_epm_BP_header,
          lv_prod_id TYPE BAPI_EPM_PRODUCT_id,
          ls_pheader TYPE bapi_epm_product_header,
          lt_return  TYPE TABLE OF bapiret2.

    "Step 1: Know the key which was passed by browser
    READ TABLE it_key_tab INTO DATA(ls_key) WITH KEY name = 'BP_ID'.

    IF sy-subrc <> 0.
      READ TABLE it_key_tab INTO ls_key WITH KEY name = 'PRODUCT_ID'.

      lv_prod_id = ls_key-value.

      CALL FUNCTION 'BAPI_EPM_PRODUCT_GET_DETAIL'
        EXPORTING
          product_id = lv_prod_id
        IMPORTING
          headerdata = ls_pheader.

      lv_BP_id = ls_pheader-SUPPLIER_ID.

    ELSE.
      lv_BP_id = ls_key-value.
    ENDIF.

    IF lv_BP_id IS INITIAL.
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception
        EXPORTING
          message_unlimited = 'Hey Dude! please pass some proper BP id'.
    ENDIF.

    "Step 2: Call the BAPI and read single data
    CALL FUNCTION 'BAPI_EPM_BP_GET_DETAIL'
      EXPORTING
        bp_id      = lv_BP_id                " EPM: Business Partner ID to be used in BAPIs
      IMPORTING
        headerdata = ls_header                " EPM: Business Partner header data ( BOR SEPM004 )
      TABLES
*       contactdata =                  " EPM: Business Partner contact data ( BOR SEPM004 )
        return     = lt_return.                 " Return Parameter

    IF lt_return IS NOT INITIAL .

      me->mo_context->get_message_container( )->add_messages_from_bapi(
        EXPORTING
          it_bapi_messages          = lt_return
      ).

      RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception
        EXPORTING
          message_container = me->mo_context->get_message_container( ).

    ENDIF.

    "Step 3: Send the Response back
    MOVE-CORRESPONDING ls_header TO er_entity.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ZNVID_XX_ODATA_DPC_EXT->SUPPLIERSET_GET_ENTITYSET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENTITY_NAME                 TYPE        STRING
* | [--->] IV_ENTITY_SET_NAME             TYPE        STRING
* | [--->] IV_SOURCE_NAME                 TYPE        STRING
* | [--->] IT_FILTER_SELECT_OPTIONS       TYPE        /IWBEP/T_MGW_SELECT_OPTION
* | [--->] IS_PAGING                      TYPE        /IWBEP/S_MGW_PAGING
* | [--->] IT_KEY_TAB                     TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR
* | [--->] IT_NAVIGATION_PATH             TYPE        /IWBEP/T_MGW_NAVIGATION_PATH
* | [--->] IT_ORDER                       TYPE        /IWBEP/T_MGW_SORTING_ORDER
* | [--->] IV_FILTER_STRING               TYPE        STRING
* | [--->] IV_SEARCH_STRING               TYPE        STRING
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_ENTITYSET(optional)
* | [<---] ET_ENTITYSET                   TYPE        ZCL_ZNVID_XX_ODATA_MPC=>TT_SUPPLIER
* | [<---] ES_RESPONSE_CONTEXT            TYPE        /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method SUPPLIERSET_GET_ENTITYSET.


    data: lt_header_data type TABLE of bapi_epm_BP_header,
          lv_top  type i,
          lv_skip  type i,
          lv_total  type i,
          ls_max_rows type bapi_epm_max_rows,
          ls_Entity type zcl_znvid_xx_odata_mpc=>ts_supplier.

    lv_top = is_paging-top.
    lv_skip = is_paging-skip.
    lv_total = lv_top + lv_skip.

    ls_max_rows-bapimaxrow = lv_total.


    "Step 1: Call BAPI to load all data from BP table
    call FUNCTION 'BAPI_EPM_BP_GET_LIST'
      EXPORTING
        max_rows            =  ls_max_rows                " EPM: Max row specifictation
      TABLES
*        selparambpid        =                  " EPM: Range for Business Partner IDs
*        selparamcompanyname =                  " EPM: Range for Company name
        bpheaderdata        = lt_header_data                 " EPM: Business Partner header data ( BOR SEPM004 )
*        bpcontactdata       =                  " EPM: Business Partner contact data ( BOR SEPM004 )
*        return              =                  " Return Parameter
      .

    "Step 2: Send the data from BAPI output to Response
    IF lv_total > 0.
      LOOP AT lt_header_data INTO data(ls_header) FROM lv_skip + 1 to lv_total.
        MOVE-CORRESPONDING ls_header to ls_Entity.
        append ls_entity to et_entityset.
      ENDLOOP.
    else.
      MOVE-CORRESPONDING lt_header_data to ET_ENTITYSET.
    ENDIF.




  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ZNVID_XX_ODATA_DPC_EXT->/IWBEP/IF_MGW_APPL_SRV_RUNTIME~EXECUTE_ACTION
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ACTION_NAME                 TYPE        STRING(optional)
* | [--->] IT_PARAMETER                   TYPE        /IWBEP/T_MGW_NAME_VALUE_PAIR(optional)
* | [--->] IO_TECH_REQUEST_CONTEXT        TYPE REF TO /IWBEP/IF_MGW_REQ_FUNC_IMPORT(optional)
* | [<---] ER_DATA                        TYPE REF TO DATA
* | [!CX!] /IWBEP/CX_MGW_BUSI_EXCEPTION
* | [!CX!] /IWBEP/CX_MGW_TECH_EXCEPTION
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method /IWBEP/IF_MGW_APPL_SRV_RUNTIME~EXECUTE_ACTION.

    CASE IV_ACTION_NAME.
      WHEN 'GetMostExpensiveProduct'.
        data : lv_cat type snwd_pd-category,
              lv_prod_id type bapi_epm_product_id,
              ls_header type bapi_epm_product_header,
              ls_entity type zcl_znvid_xx_odata_mpc=>ts_product.

        READ TABLE it_parameter INTO data(ls_param) INDEX 1.
        lv_cat = ls_param-value.

        select single product_id into @lv_prod_id from snwd_pd where price =
        ( select max( price ) from snwd_pd WHERE category = @lv_cat ).

        call FUNCTION 'BAPI_EPM_PRODUCT_GET_DETAIL'
          EXPORTING
            product_id         = lv_prod_id                 " EPM: Product header data of BOR object SEPM002
          IMPORTING
            headerdata         = ls_header                 " EPM: Product header data of BOR object SEPM002
*          TABLES
*            conversion_factors =                  " EPM: Product conversion factor data of BOR object SEPM002
*            return             =                  " Return Parameter
          .

          MOVE-CORRESPONDING ls_header to ls_entity.

          me->copy_data_to_ref(
            EXPORTING
              is_data = ls_entity
            CHANGING
              cr_data = ER_DATA
          ).

      WHEN OTHERS.
    ENDCASE.



  endmethod.
ENDCLASS.